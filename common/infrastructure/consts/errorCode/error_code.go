package errorCode

import (
	"log"

	"example-go/common/infrastructure/consts/errorType"
)

var ErrorCodeMap = map[string]int{
	// common 10xxx ~ 11xxx
	errorType.StatusForbidden:     10403,
	errorType.StatusBadRequest:    10400,
	errorType.StatusConflict:      10409,
	errorType.TooManyRequest:      10429,
	errorType.InternalServerError: 10500,

	errorType.ValidationError:                                 11000,
	errorType.AlgorithmRequired:                               11001,
	errorType.ContentTypeRequired:                             11002,
	errorType.KeyIdRequired:                                   11003,
	errorType.SignatureRequired:                               11004,
	errorType.SignatureUnmatched:                              11005,
	errorType.RequestBodyRequired:                             11006,
	errorType.SecretKeyNotFound:                               11007,
	errorType.SecretKeyExpired:                                11008,
	errorType.PlatformNotFound:                                11009,
	errorType.PlatformAllowedListNotFound:                     11010,
	errorType.InvalidPlatformStatus:                           11011,
	errorType.DuplicateTransferId:                             11012,
	errorType.DuplicateEntry:                                  11013,
	errorType.EntryNotFound:                                   11014,
	errorType.Sum64aError:                                     11015,
	errorType.PermissionDenied:                                11016,
	errorType.TypeCastingFail:                                 11017,
	errorType.LanguageRequiredValidationError:                 11018,
	errorType.LanguageUnknownValidationError:                  11019,
	errorType.TimeZoneRequiredValidationError:                 11020,
	errorType.TimeZoneFormatValidationError:                   11021,
	errorType.OddsDecimalValidationError:                      11022,
	errorType.SidValidationError:                              11023,
	errorType.StartDateHourRequiredValidationError:            11024,
	errorType.EndDateHourRequiredValidationError:              11025,
	errorType.CurrencyTypeValidationError:                     11026,
	errorType.StartDateRequiredValidationError:                11027,
	errorType.EndDateRequiredValidationError:                  11028,
	errorType.GidFormatValidationError:                        11029,
	errorType.OrderIdLengthValidationError:                    11030,
	errorType.StartDateAfterEqualEndDateValidationError:       11031,
	errorType.OrderStatusValidationError:                      11032,
	errorType.OrderTypeValidationError:                        11033,
	errorType.PaidStatusValidationError:                       11034,
	errorType.PlatformIdLengthValidationError:                 11035,
	errorType.SidFormatValidationError:                        11036,
	errorType.SortOrderValidationError:                        11037,
	errorType.SortTypeValidationError:                         11038,
	errorType.TidFormatValidationError:                        11039,
	errorType.UserNameLengthValidationError:                   11040,
	errorType.DeviceTypeValidationError:                       11041,
	errorType.TidValidationError:                              11042,
	errorType.GidValidationError:                              11043,
	errorType.MatchTypeValidationError:                        11044,
	errorType.MarketValidationError:                           11045,
	errorType.BetOnValidationError:                            11046,
	errorType.KValidationError:                                11047,
	errorType.AbsKValidationError:                             11048,
	errorType.EUOddsValidationError:                           11049,
	errorType.OddsValidationError:                             11050,
	errorType.ClientIpValidationError:                         11051,
	errorType.PlatformIdValidationError:                       11052,
	errorType.NameValidationError:                             11053,
	errorType.DateRangeValidationError:                        11054,
	errorType.OddsDigitValidationError:                        11055,
	errorType.CurrencyMappingValidationError:                  11056,
	errorType.AgentIdValidationError:                          11057,
	errorType.StartBetTimeAfterEqualEndBetTimeValidationError: 11058,
	errorType.MaxRequestCountLimitError:                       11059,
	errorType.QueryParamValidationError:                       11060,

	// user 12xxx
	errorType.UserNotFound:                         12001,
	errorType.MatchStatusValidationError:           12002,
	errorType.CashOutTypeRequiredValidationError:   12003,
	errorType.CashOutTypeValidationError:           12004,
	errorType.OddsCheckTypeRequiredValidationError: 12005,
	errorType.OddsCheckTypeValidationError:         12006,
	errorType.OddsTypeRequiredValidationError:      12007,
	errorType.OddsTypeValidationError:              12008,
	errorType.UserNameValidationError:              12009,

	// wallet 13xxx
	errorType.BalanceLessThanAmount:        13001,
	errorType.BalanceCanNotBeNegative:      13002,
	errorType.AmountDecimalValidationError: 13003,
	errorType.AmountDigitValidationError:   13004,
	errorType.AmountZeroValidationError:    13005,
	errorType.AmountValidationError:        13006,
	errorType.TransactionNotFound:          13007,

	// bet 14xxx
	errorType.WalletIsEmpty:                     14001,
	errorType.BalanceNotEnough:                  14002,
	errorType.AnteValidationError:               14003,
	errorType.AnteDecimalValidationError:        14004,
	errorType.AnteDigitValidationError:          14005,
	errorType.UnknownParlayRuleValidationError:  14006,
	errorType.UnknownParlaySetValidationError:   14007,
	errorType.DuplicateParlaySetValidationError: 14008,
	errorType.TransferIdValidationError:         14009,
	errorType.RequestTimeValidationError:        14010,
	errorType.SinglesValidationError:            14011,
	errorType.ParlaysValidationError:            14012,
	errorType.TicketsValidationError:            14013,
	errorType.SetValidationError:                14014,
	errorType.OrderIdValidationError:            14015,

	// portal 15xxx
	errorType.WrongURLPathErr:                15001,
	errorType.SportMaintenance:               15002,
	errorType.DateParamRequired:              15003,
	errorType.DateParamFormatValidationErr:   15004,
	errorType.DateFieldNotRequired:           15005,
	errorType.DateFieldRequired:              15006,
	errorType.TidsFieldNotRequired:           15007,
	errorType.TidsFieldRequired:              15008,
	errorType.OddsInfosValidationError:       15009,
	errorType.GameTypeValidationError:        15010,
	errorType.GameInfoNotFound:               15011,
	errorType.DateArrayLengthValidationError: 15012,
	errorType.SidArrayLengthValidationError:  15013,
	errorType.PageValidationError:            15014,
	errorType.OrderSettleValidationError:     15015,

	// console 16xxx
	errorType.LoginFail:                                16001,
	errorType.PermissionNotExists:                      16002,
	errorType.RoleExists:                               16003,
	errorType.RoleNotFound:                             16004,
	errorType.RoleDeleted:                              16005,
	errorType.RoleUsed:                                 16006,
	errorType.PlatformRoleNotAllow:                     16007,
	errorType.OperatorNotFound:                         16008,
	errorType.OperatorExists:                           16009,
	errorType.OperatorIdFormatIncorrect:                16010,
	errorType.OperatorDeleted:                          16011,
	errorType.PlatformNotAllow:                         16012,
	errorType.OldPasswordIncorrect:                     16013,
	errorType.ChangeTheSamePassword:                    16014,
	errorType.ReachLimit:                               16015,
	errorType.UserNoteNotFound:                         16016,
	errorType.OperatorNameFormatValidationError:        16017,
	errorType.PasswordFormatValidationError:            16018,
	errorType.ActivationRequiredValidationError:        16019,
	errorType.OperatorIdRequiredValidationError:        16020,
	errorType.OperatorIdLengthValidationError:          16021,
	errorType.RoleIdRequiredValidationError:            16022,
	errorType.NoteIdRequiredValidationError:            16023,
	errorType.UserIdRequiredValidationError:            16024,
	errorType.UserIdLengthValidationError:              16025,
	errorType.OperatorIdValidationError:                16026,
	errorType.OperatorNameValidationError:              16027,
	errorType.PasswordValidationError:                  16028,
	errorType.RoleIdValidationError:                    16029,
	errorType.OldPasswordValidationError:               16030,
	errorType.NewPasswordValidationError:               16031,
	errorType.InfoBoardValidationError:                 16032,
	errorType.OrdersValidationError:                    16033,
	errorType.NotificationNodeValidationError:          16034,
	errorType.ForecastNodeValidationError:              16035,
	errorType.ReportsNodeValidationError:               16036,
	errorType.UserManagementNodeValidationError:        16037,
	errorType.RiskManagementNodeValidationError:        16038,
	errorType.GameManagementNodeValidationError:        16039,
	errorType.PermissionManagementNodeValidationError:  16040,
	errorType.NoteValidationError:                      16041,
	errorType.PlatformIdFormatValidationError:          16042,
	errorType.AgentIdTreeValidationError:               16043,
	errorType.UpperAgentIdValidationError:              16044,
	errorType.UpperAgentNotFoundValidationError:        16045,
	errorType.AgentIdExistsValidationError:             16046,
	errorType.AgentConfigWriteValidationError:          16047,
	errorType.AgentNotFoundValidationError:             16048,
	errorType.UpperAgentEqualChildAgentValidationError: 16049,

	// report 17xxx
	errorType.SwitchStatusValidationError: 17001,
}

func CheckDuplicateErrorCode() {
	checkMap := make(map[int]int)
	for et, ec := range ErrorCodeMap {
		_, exist := checkMap[ec]
		if exist {
			log.Println("duplicate error code:", ec, " error type:", et)
		} else {
			checkMap[ec] = 1
		}
	}
}
